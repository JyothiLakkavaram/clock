{"version":3,"sources":["components/Clock.js","components/Stopwatch.js","components/Countdown.js","components/Nav.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["moment","require","Clock","props","state","clock","format","date","setInterval","setState","console","log","className","this","Component","StopWatch","hour","minute","second","handleStartBtn","handleStopBtn","handleStart","bind","handleStop","timerID","tick","clearInterval","prevState","onClick","Countdown","minutes","seconds","disabled","handleMinute","handleSeconds","handleReset","myInterval","e","target","value","id","type","min","max","required","onChange","Nav","to","path","Stopwatch","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1e5dfa06.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nvar moment = require('moment');\r\nexport class Clock extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n           clock: moment().format('MMMM Do YYYY, h:mm:ss a'),\r\n           date: moment().format('MMMM Do YYYY')\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        setInterval(() => {\r\n            this.setState({\r\n                clock: moment().format('h:mm:ss a'),\r\n                date: moment().format('dddd, MMMM Do YYYY')\r\n            \r\n            })\r\n        }, 1);\r\n        console.log('Hello');\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"main\">\r\n\r\n                <div className=\"circle\">\r\n                    <h1>{this.state.clock}</h1>\r\n                    <span>{this.state.date}</span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Clock\r\n","import React, { Component } from 'react'\r\n\r\nexport class StopWatch extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             hour: 0,\r\n             minute: 0,\r\n             second:  0,\r\n             handleStartBtn: 'start',\r\n             handleStopBtn: 'stop'\r\n        }\r\n        this.handleStart = this.handleStart.bind(this);\r\n        this.handleStop = this.handleStop.bind(this);\r\n    }  \r\n   handleStart(){\r\n    if(this.state.handleStartBtn === 'start' || this.state.handleStartBtn === 'restart')\r\n    {\r\n        this.setState({\r\n            handleStartBtn : 'pause'\r\n        })\r\n        this.timerID  = setInterval(() => {\r\n            this.tick()\r\n        }, (1000));\r\n   }\r\n   else if(this.state.handleStartBtn === 'pause') {\r\n    this.setState({\r\n        handleStartBtn : 'restart'\r\n    })\r\n    clearInterval(this.timerID);\r\n   }\r\n   \r\n    }\r\n\r\n    handleStop(){\r\n        \r\n        clearInterval(this.timerID);\r\n            this.setState({\r\n                second: 0,\r\n                minute: 0,\r\n                hour: 0,\r\n                handleStartBtn: 'start'\r\n            })\r\n        }\r\n    \r\ntick(){\r\n    if(this.state.minute >60) {\r\n        this.setState((prevState) => ({\r\n                hour: prevState.hour + 1,\r\n                minute: 0\r\n        }))\r\n    }\r\n    else if(this.state.minute <= 60) {\r\n        if(this.state.second > 60) {\r\n        this.setState((prevState) => ({\r\n            minute: prevState.minute + 1,\r\n            second: 0\r\n        }))\r\n        }\r\n        else if(this.state.second <= 60){\r\n           \r\n                this.setState((prevState) => ({\r\n                    second: prevState.second + 1\r\n                }))\r\n            \r\n           \r\n    }\r\n}\r\n}\r\n    render() {\r\n        return (\r\n          <div>\r\n               <div className=\"row mt-5 text-center stopwatch-display\">\r\n               <div className=\"col-md-3 col-sm-12\"></div>\r\n                    <div className=\"col-md-2 col-sm-12\">\r\n               <h2 className=\"display-1 box\">{this.state.hour}h</h2>\r\n               </div>\r\n               <div className=\"col-md-2 col-sm-12\">\r\n               <h2 className=\"display-1 box\">{this.state.minute}m</h2>\r\n               </div>\r\n               <div className=\"col-md-2 col-sm-12\">\r\n               <h2 className=\"display-1 box\">{this.state.second}s</h2>\r\n               </div>\r\n               <div className=\"col-md-3 col-sm-12\"></div>\r\n                </div>\r\n               <div className=\"row m-auto text-center\">\r\n                   <div className=\"col mt-5\">\r\n                   <button className=\"btn\" onClick={this.handleStart}>{this.state.handleStartBtn}</button>\r\n                   <button className=\"btn\" onClick={this.handleStop}>{this.state.handleStopBtn}</button>\r\n                  \r\n                    </div>\r\n               </div>\r\n          </div>\r\n           \r\n\r\n           \r\n        )\r\n    }\r\n}\r\n\r\nexport default StopWatch\r\n","import React, { Component } from 'react'\r\n\r\nexport class Countdown extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            minutes: 0,\r\n            seconds: 0,\r\n            disabled: false\r\n        }\r\n        \r\n    this.handleMinute = this.handleMinute.bind(this);\r\n    this.handleSeconds = this.handleSeconds.bind(this);\r\n    this.handleStart = this.handleStart.bind(this);\r\n    this.handleStop = this.handleStop.bind(this);\r\n    this.handleReset = this.handleReset.bind(this);\r\n    }\r\n   \r\n    handleStart() {\r\n\r\n        this.myInterval = setInterval(() => {\r\n            const { seconds, minutes } = this.state\r\n            \r\n            if (seconds > 0) {\r\n                this.setState(({ seconds }) => ({\r\n                    seconds: seconds - 1\r\n                }))\r\n            }\r\n            if (seconds === 0) {\r\n                if (minutes === 0) {\r\n                    clearInterval(this.myInterval)\r\n                } else {\r\n                    this.setState(({ minutes }) => ({\r\n                        minutes: minutes - 1,\r\n                        seconds: 59\r\n                    }))\r\n                }\r\n            } \r\n        }, 1000)\r\n       \r\n        this.setState({\r\n            disabled: true\r\n        })\r\n       \r\n    }\r\nhandleStop(){\r\nclearInterval(this.myInterval)\r\nthis.setState({\r\n    disabled: false\r\n})\r\n}\r\nhandleReset(){\r\n    this.setState({\r\n        minutes: 0,\r\n        seconds: 0,\r\n        disabled: false\r\n    })\r\n\r\n    }\r\n    handleMinute(e){\r\n       this.setState({\r\n        minutes : e.target.value\r\n       });\r\n       e.disabled = true\r\n    }\r\n    handleSeconds(e){\r\n        this.setState({\r\n            seconds:  e.target.value\r\n        });\r\n        e.disabled = true\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"h1 text-center d-flex flex-column\">\r\n                <div className=\"mt-5 mb-3\">\r\n               <span className=\"mr-3\">Set Time : </span> <input id=\"min\" disabled= {this.state.disabled} type=\"number\" min='0' max='60' required value={this.state.minutes}  onChange = {this.handleMinute} /> minutes\r\n                <input id=\"sec\" type=\"number\" disabled= {this.state.disabled} className=\"ml-5\" min='0' max='60' required  value= {this.state.seconds} onChange = {this.handleSeconds}/> seconds\r\n                </div>\r\n                <div className=\"my-3 display-1\">\r\n                {this.state.minutes} : {this.state.seconds}\r\n                </div>\r\n               \r\n                <div className=\"my-5\">\r\n                <button className=\"btn\" onClick={this.handleStart}  disabled= {this.state.disabled}>START</button>\r\n                <button className=\"btn\" onClick={this.handleStop}>STOP</button>\r\n                <button className=\"btn\" onClick={this.handleReset}>RESET</button>\r\n                  \r\n                </div>\r\n               \r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Countdown\r\n","import React from 'react'\r\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\r\nimport Clock from './Clock';\r\nimport Stopwatch from './Stopwatch';\r\nimport Countdown from './Countdown';\r\n\r\nfunction Nav() {\r\n    return (\r\n        <Router>\r\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-dark text-white font-weight-bold h5\">\r\n                    \r\n                            <Link className=\"nav-brand nav-link text-white \" to = '/'>Clock</Link>\r\n                           \r\n                            <Link className=\"nav-brand nav-link text-white\" to ='/stopwatch'>StopWatch</Link>\r\n                      \r\n                            <Link className=\"nav-brand nav-link text-white\" to ='/countdown'>Countdown</Link>\r\n                        \r\n                </nav>\r\n                <Switch>\r\n                    <Route path='/stopwatch'>\r\n                        <Stopwatch />\r\n                    </Route>\r\n                    <Route path='/countdown'>\r\n                        <Countdown />\r\n                    </Route>\r\n                    <Route path='/'>\r\n                        <Clock />\r\n                    </Route>\r\n                </Switch>\r\n            \r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react'\r\n\r\nfunction Footer() {\r\n\r\n    return (\r\n        \r\n            <footer>\r\n                <p> Copyright &copy; 2020 | Naga Jyothi Lakkavaram</p>\r\n            </footer>\r\n        \r\n    )\r\n}\r\n\r\nexport default Footer\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Nav from './components/Nav';\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Nav />\n        <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}